//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by BLToolkit template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

using BLToolkit.Data;
using BLToolkit.Data.DataProvider;
using BLToolkit.Data.Linq;
using BLToolkit.Data.Sql;
using BLToolkit.Data.Sql.SqlProvider;
using BLToolkit.DataAccess;
using BLToolkit.Mapping;

namespace StudyWeb.Model
{
	public partial class UnitContext : DbManager
	{
		public Table<tb_MeetingOrder> tb_MeetingOrder { get { return this.GetTable<tb_MeetingOrder>(); } }
		public Table<tb_MeetingRoom>  tb_MeetingRoom  { get { return this.GetTable<tb_MeetingRoom>();  } }
		public Table<tb_MeetingTime>  tb_MeetingTime  { get { return this.GetTable<tb_MeetingTime>();  } }
		public Table<tb_User>         tb_User         { get { return this.GetTable<tb_User>();         } }
		
		#region FreeTextTable
		
		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}
		
		class FreeTextTableExpressionAttribute : TableExpressionAttribute
		{
			public FreeTextTableExpressionAttribute()
				: base("")
			{
			}
		
			public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
			{
				var aargs  = sqlArgs.ToArray();
				var arr    = ConvertArgs(member, aargs).ToList();
				var method = (MethodInfo)member;
				var sp     = new MsSql2008SqlProvider();
		
				{
					var ttype  = method.GetGenericArguments()[0];
					var tbl    = new SqlTable(ttype);
		
					var database     = tbl.Database     == null ? null : sp.Convert(tbl.Database,     ConvertType.NameToDatabase).  ToString();
					var owner        = tbl.Owner        == null ? null : sp.Convert(tbl.Owner,        ConvertType.NameToOwner).     ToString();
					var physicalName = tbl.PhysicalName == null ? null : sp.Convert(tbl.PhysicalName, ConvertType.NameToQueryTable).ToString();
		
					var name   = sp.BuildTableName(new StringBuilder(), database, owner, physicalName);
		
					arr.Add(new SqlExpression(name.ToString(), Precedence.Primary));
				}
		
				{
					var field = ((ConstantExpression)expArgs.First()).Value;
		
					if (field is string)
					{
						arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
					}
					else if (field is LambdaExpression)
					{
						var body = ((LambdaExpression)field).Body;
		
						if (body is MemberExpression)
						{
							var name = ((MemberExpression)body).Member.Name;
		
							name = sp.Convert(name, ConvertType.NameToQueryField).ToString();
		
							arr[0] = new SqlExpression(name, Precedence.Primary);
						}
					}
				}
		
				table.SqlTableType   = SqlTableType.Expression;
				table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
				table.TableArguments = arr.ToArray();
			}
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}
		
		[FreeTextTableExpressionAttribute]
		public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}
		
		#endregion
	}

	[TableName(Name="tb_MeetingOrder")]
	public partial class tb_MeetingOrder
	{
		[Identity, PrimaryKey(1)] public int      Id           { get; set; } // int(10)
		                          public int      RoomId       { get; set; } // int(10)
		                          public int      UserId       { get; set; } // int(10)
		                          public string   Content      { get; set; } // nvarchar(100)
        [NonUpdatable]            public DateTime CreationTime { get; set; } // datetime(3)
		                          public int      State        { get; set; } // int(10)

		// tb_MeetingRoom
		[Association(ThisKey="RoomId", OtherKey="Id", CanBeNull=false)]
		public tb_MeetingRoom tbMeetingRoom { get; set; }

		// tb_User
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false)]
		public tb_User tbUser { get; set; }

		// tb_MeetingOrder_BackReference
		[Association(ThisKey="Id", OtherKey="OrderId", CanBeNull=true)]
		public IEnumerable<tb_MeetingTime> tbMeetingOrders { get; set; }
	}

	[TableName(Name="tb_MeetingRoom")]
	public partial class tb_MeetingRoom
	{
		[Identity, PrimaryKey(1)] public int      Id           { get; set; } // int(10)
		                          public string   RoomName     { get; set; } // nvarchar(10)
		                          public string   Location     { get; set; } // nvarchar(200)
		[NonUpdatable]            public DateTime CreationTime { get; set; } // datetime(3)
		                          public int      State        { get; set; } // int(10)

		// tb_MeetingRoom_BackReference
		[Association(ThisKey="Id", OtherKey="RoomId", CanBeNull=true)]
		public IEnumerable<tb_MeetingOrder> tbMeetingRooms { get; set; }
	}

	[TableName(Name="tb_MeetingTime")]
	public partial class tb_MeetingTime
	{
		[Identity, PrimaryKey(1)] public int      Id               { get; set; } // int(10)
		                          public int      OrderId          { get; set; } // int(10)
		                          public DateTime MeetingDate      { get; set; } // datetime(3)
		                          public DateTime MeetingStartTime { get; set; } // datetime(3)
		                          public DateTime MeetingEndTime   { get; set; } // datetime(3)
        [NonUpdatable]            public DateTime CreationTime { get; set; } // datetime(3)
		                          public int      State            { get; set; } // int(10)

		// tb_MeetingOrder
		[Association(ThisKey="OrderId", OtherKey="Id", CanBeNull=false)]
		public tb_MeetingOrder tbMeetingOrder { get; set; }
	}

	[TableName(Name="tb_User")]
	public partial class tb_User
	{
		[Identity, PrimaryKey(1)] public int      Id           { get; set; } // int(10)
		                          public string   LoginName    { get; set; } // nvarchar(20)
		                          public string   Password     { get; set; } // nvarchar(20)
		                          public string   UserName     { get; set; } // nvarchar(50)
        [NonUpdatable]            public DateTime CreationTime { get; set; } // datetime(3)
		                          public int      State        { get; set; } // int(10)

		// tb_User_BackReference
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true)]
		public IEnumerable<tb_MeetingOrder> tbUsers { get; set; }
	}
}
